
// Generated by TypeScript
export default class CRC8{
    private polynomial: number;
    private initialCRC: number;
    private finalXOR: number;
    private reflectInput: boolean;
    private reflectOutput: boolean;
    private CRCWidth: number = 8;
    private PecTable: number[];

    constructor(polynomial: number = 0x07, initialCRC: number = 0x00, finalXOR: number = 0x00, reflectInput: boolean = false, reflectOutput: boolean = false){
        this.polynomial = polynomial;
        this.initialCRC = initialCRC;
        this.finalXOR = finalXOR;
        this.reflectInput = reflectInput;
        this.reflectOutput = reflectOutput;
        this.PecTable = this.#GeneratePECTable();
    }

    #ReflectByte(byte: number){
        byte = ((byte & 0x55) << 1) | ((byte & 0xAA) >> 1)
        byte = ((byte & 0x33) << 2) | ((byte & 0xCC) >> 2)
        byte = ((byte & 0x0F) << 4) | ((byte & 0xF0) >> 4)
        return byte
    }

    #CalcByte(crc: number, byte: number){
        
        if(this.reflectInput){
            byte = this.#ReflectByte(byte);
        }

        crc ^= byte << (this.CRCWidth - 8);

        for(let i = 0; i < 8; i++){

            crc <<= 1;
      
            if (crc & (1 << this.CRCWidth)){
                crc ^= (1 << this.CRCWidth) | this.polynomial;
            }
        }

        return crc;
    }

    FromBufferWithoutTable(buffer: number[]){
        let crc = this.initialCRC;

        for(let i = 0; i < buffer.length; i++){
            crc = this.#CalcByte(crc, (buffer[i] ?? 0) & 0xFF);
        }

        if(this.reflectOutput){
            crc = this.#ReflectByte(crc);
        }

        return crc ^ this.finalXOR
    }

    #GeneratePECTable(){
        let Table: number[] = [];

        for(let i = 0; i <= 0xFF; i++){
            let value = this.#CalcByte(0, i);

            if(this.reflectOutput){
                value = this.#ReflectByte(value);
            }
    
            Table[i] = value ^ this.finalXOR
        }
        
        return Table;
    }

    GetPECTable(){
        return this.PecTable;
    }

    FromBuffer(buffer: number[], start: number = 0, end: number = buffer.length): number{
        let crc = this.initialCRC;

        for(let i = start; i < end; i++){
            const iTableIdx = crc ^ (buffer[i] ?? 0);
            crc = this.PecTable[iTableIdx] ?? 0;
        }

        return crc
    }

};

// type CRC8Type = {
//     polynomial: number;
//     initialCRC: number;
//     finalXOR: number;
//     reflectInput: boolean;
//     reflectOutput: boolean;
// }

// const CRC8Library: { [CRC: string]: CRC8Type} = {
//     "CRC8/SMBus": {
//         polynomial: 0x07,
//         initialCRC: 0x00,
//         finalXOR: 0x00,
//         reflectInput: false,
//         reflectOutput: false,
//     }
// }